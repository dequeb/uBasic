package irgen

import (
	"strings"
	"time"
	"uBasic/ast"
	"uBasic/token"

	"github.com/llir/llvm/ir"
	"github.com/llir/llvm/ir/types"
)

// import (
// 	"github.com/llir/llvm/ir"
// 	"github.com/llir/llvm/ir/constant"
// 	"github.com/llir/llvm/ir/types"
// )

func StringToTime(s string) *time.Time {
	s = strings.Trim(s, "#")
	// List of date formats
	dateFormats := []string{
		"2006-01-02",
		"2006/01/02",
		"2006-01-02 15:04:05",
		"2006/01/02 15:04:05",
		"15:04:05",
	}

	for _, format := range dateFormats {
		dateTimeValue, err := time.Parse(format, s)
		if err == nil {
			return &dateTimeValue
		}
	}
	return nil
}

func convertTimeIntoDaysAndSeconds(dateTime time.Time) (int, int) {
	format := "2006-01-02 15:04:05"

	// calculate the number of days since 0001-01-01
	then, _ := time.Parse(format, "0001-01-01 00:00:00")
	diff := dateTime.Sub(then)
	days := int(diff.Hours() / 24)
	// calculate the number of seconds since midnight today
	return days, dateTime.Hour()*3600 + dateTime.Minute()*60 + dateTime.Second()
}

func (ctx *Context) compileExternals() {
	// Convenience types and values.
	i32 := types.I32
	i8 := types.I8
	//i8x50 := types.NewArray(i8, 50)
	i8ptr := types.NewPointer(i8)
	//zero := constant.NewInt(0, i32)

	// add printf function
	printf := ctx.Module.NewFunc("printf", i32, ir.NewParam("format", i8ptr))
	printf.Sig.Variadic = true
	ctx.Functs["printf"] = printf

	// add string functions
	puts := ctx.Module.NewFunc("puts", i32, ir.NewParam("s", i8ptr))
	ctx.Functs["puts"] = puts
	scanf := ctx.Module.NewFunc("scanf", i32, ir.NewParam("format", i8ptr))
	scanf.Sig.Variadic = true
	ctx.Functs["scanf"] = scanf
	strcpy := ctx.Module.NewFunc("strcpy", i8ptr, ir.NewParam("dst", i8ptr), ir.NewParam("src", i8ptr))
	ctx.Functs["strcpy"] = strcpy
	strcat := ctx.Module.NewFunc("strcat", i8ptr, ir.NewParam("dst", i8ptr), ir.NewParam("src", i8ptr))
	ctx.Functs["strcat"] = strcat
	sscanf := ctx.Module.NewFunc("sscanf", i32, ir.NewParam("str", types.NewPointer(types.I8)), ir.NewParam("format", types.NewPointer(types.I8)), ir.NewParam("dst", types.NewPointer(types.I8)))
	ctx.Functs["sscanf"] = sscanf
	sprintf := ctx.Module.NewFunc("sprintf", i32, ir.NewParam("str", types.NewPointer(types.I8)), ir.NewParam("format", types.NewPointer(types.I8)))
	sprintf.Sig.Variadic = true
	ctx.Functs["sprintf"] = sprintf

	// constants
	ctx.compileConstant(&ast.BasicLit{Kind: token.StringLit, Value: ""}, "vbEmpty")
	ctx.compileConstant(&ast.BasicLit{Kind: token.StringLit, Value: "\x0D"}, "vbCR")
	ctx.compileConstant(&ast.BasicLit{Kind: token.StringLit, Value: "\x0A"}, "vbLF")
	ctx.compileConstant(&ast.BasicLit{Kind: token.StringLit, Value: "\x0D\x0A"}, "vbCrLf")
	ctx.compileConstant(&ast.BasicLit{Kind: token.StringLit, Value: "\x09"}, "vbTab")
	ctx.compileConstant(&ast.BasicLit{Kind: token.StringLit, Value: "True"}, "true")
	ctx.compileConstant(&ast.BasicLit{Kind: token.StringLit, Value: "False"}, "false")
}
