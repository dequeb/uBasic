// @.str = private unnamed_addr constant [15 x i8] c"This is source\00", align 1
// @.str.1 = private unnamed_addr constant [20 x i8] c"This is destination\00", align 1
// @.str.2 = private unnamed_addr constant [32 x i8] c"Final destination string : |%s|\00", align 1

// ; Function Attrs: noinline nounwind uwtable
// define i32 @main() #0 {
//   %1 = alloca i32, align 4
//   %2 = alloca [50 x i8], align 16
//   %3 = alloca [50 x i8], align 16
//   store i32 0, i32* %1, align 4
//   %4 = getelementptr inbounds [50 x i8], [50 x i8]* %2, i32 0, i32 0
//   %5 = call i8* @strcpy(i8* %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0)) #3
//   %6 = getelementptr inbounds [50 x i8], [50 x i8]* %3, i32 0, i32 0
//   %7 = call i8* @strcpy(i8* %6, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0)) #3
//   %8 = getelementptr inbounds [50 x i8], [50 x i8]* %3, i32 0, i32 0
//   %9 = getelementptr inbounds [50 x i8], [50 x i8]* %2, i32 0, i32 0
//   %10 = call i8* @strcat(i8* %8, i8* %9) #3
//   %11 = getelementptr inbounds [50 x i8], [50 x i8]* %3, i32 0, i32 0
//   %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i32 0, i32 0), i8* %11)
//   ret i32 0
// }

// ; Function Attrs: nounwind
// declare i8* @strcpy(i8*, i8*) #1

// ; Function Attrs: nounwind
// declare i8* @strcat(i8*, i8*) #1

// declare i32 @printf(i8*, ...) #2

package main

import (
	"fmt"

	"github.com/llir/llvm/ir"
	"github.com/llir/llvm/ir/constant"
	"github.com/llir/llvm/ir/types"
)

func main() {
	// Convenience types and values.
	i32 := types.I32
	i8 := types.I8
	i8x50 := types.NewArray(i8, 50)
	i8ptr := types.NewPointer(i8)
	zero := constant.NewInt(0, i32)
	// Function declarations.
	m := ir.NewModule()
	strcpy := m.NewFunction("strcpy", i8ptr, ir.NewParam("dst", i8ptr), ir.NewParam("src", i8ptr))
	strcat := m.NewFunction("strcat", i8ptr, ir.NewParam("dst", i8ptr), ir.NewParam("src", i8ptr))
	printf := m.NewFunction("printf", i32, ir.NewParam("format", i8ptr))
	printf.Sig.Variadic = true
	// Global variables.
	str := m.NewGlobalDef(".str", newCharArray("This is source\x00"))
	str.IsConst = true
	str1 := m.NewGlobalDef(".str.1", newCharArray("This is destination\x00"))
	str1.IsConst = true
	str2 := m.NewGlobalDef(".str.2", newCharArray("Final destination string : |%s|\x00"))
	str2.IsConst = true
	// Function definitions.
	f := m.NewFunction("main", i32)
	entry := f.NewBlock("")
	tmp1 := entry.NewAlloca(i32)
	tmp2 := entry.NewAlloca(i8x50)
	tmp3 := entry.NewAlloca(i8x50)
	entry.NewStore(zero, tmp1)
	tmp4 := entry.NewGetElementPtr(tmp2, zero, zero)
	entry.NewCall(strcpy, tmp4, constant.NewGetElementPtr(str, zero, zero))
	tmp6 := entry.NewGetElementPtr(tmp3, zero, zero)
	entry.NewCall(strcpy, tmp6, constant.NewGetElementPtr(str1, zero, zero))
	tmp8 := entry.NewGetElementPtr(tmp3, zero, zero)
	tmp9 := entry.NewGetElementPtr(tmp2, zero, zero)
	entry.NewCall(strcat, tmp8, tmp9)
	tmp11 := entry.NewGetElementPtr(tmp3, zero, zero)
	entry.NewCall(printf, constant.NewGetElementPtr(str2, zero, zero), tmp11)
	entry.NewRet(zero)
	// Print module to standard output.
	fmt.Println(m)
}

func newCharArray(s string) *constant.Array {
	var bs []constant.Constant
	for i := 0; i < len(s); i++ {
		b := constant.NewInt(int64(s[i]), types.I8)
		bs = append(bs, b)
	}
	c := constant.NewArray(bs...)
	c.CharArray = true
	return c
}
